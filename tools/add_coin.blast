{"cells":[{"kind":2,"language":"javascript","value":"\nlet can = await ic(\"u45jl-liaaa-aaaam-abppa-cai\");\n\nimport { computeTreasury } from \"./lib_treasury.js\";\n\nlet conf = await can.get_config();\nlet tokens = conf.tokens;\nlet pairs = conf.pairs;\nfunction symbolToId(symbol) {\n  return tokens.findIndex(t => t.symbol === symbol);\n};\n\nasync function addSns(root) {\n  let rc = await ic(root);\n  let cans = await rc.list_sns_canisters({});\n  let ledger = await ic(cans.ledger.toText());\n  let decimals = await ledger.icrc1_decimals();\n  let symbol = await ledger.icrc1_symbol();\n  let name = await ledger.icrc1_name();\n\n  let params = {\n    locking: {\n      sns: {\n        root: root,\n        swap: cans.swap,\n        ledger: cans.ledger,\n        index: cans.index,\n        governance: cans.governance,\n        treasury_subaccount: computeTreasury(cans.governance.toUint8Array(), 0),\n        other_treasuries: [],\n      }\n    },\n    decimals,\n    deleted: false,\n    ledger: {\n      icrc1: {\n        ledger: cans.ledger,\n      }\n    },\n    details: [],\n    name,\n    symbol\n  };\n\n  await can.admin([{ token_add: params }]).then(log);\n}\n\nasync function getSns(root) {\n  let rc = await ic(root);\n  let cans = await rc.list_sns_canisters({});\n  let ledger = await ic(cans.ledger.toText());\n  let decimals = await ledger.icrc1_decimals();\n  let symbol = await ledger.icrc1_symbol();\n  let name = await ledger.icrc1_name();\n\n  let params = {\n    locking: {\n      sns: {\n        root: root,\n        swap: cans.swap,\n        ledger: cans.ledger,\n        index: cans.index,\n        governance: cans.governance,\n        treasury_subaccount: computeTreasury(cans.governance.toUint8Array(), 0),\n        other_treasuries: [],\n      }\n    },\n    decimals,\n    deleted: false,\n    ledger: {\n      icrc1: {\n        ledger: cans.ledger,\n      }\n    },\n    details: [],\n    name,\n    symbol\n  };\n\n  return params;\n}\n\nasync function addIcrcToken(ledgerId) {\n  let ledger = await ic(ledgerId, \"https://raw.githubusercontent.com/dfinity/ICRC-1/main/standards/ICRC-1/ICRC-1.did\");\n  let decimals = await ledger.icrc1_decimals();\n  let symbol = await ledger.icrc1_symbol();\n  let name = await ledger.icrc1_name();\n\n  await can.admin([{\n    token_add: {\n      decimals,\n      symbol,\n      name,\n      deleted: false,\n      locking: {\n        none: null\n      },\n      ledger: {\n        icrc1: {\n          ledger: ledgerId,\n        }\n      },\n      details: [],\n    }\n  }]).then(log);\n\n}\n\n\nglobal({ tokens, pairs, symbolToId, addIcrcToken, addSns, getSns });\n\nlog(`tokens: ${tokens.length} pairs: ${pairs.length}`)"},{"kind":2,"language":"javascript","value":"// Add ICRC-1 Ledger\nawait addIcrcToken(\"hbjjz-kaaaa-aaaan-qiocq-cai\").then(log)"},{"kind":2,"language":"javascript","value":"// Add pair | ICPSWAP\nawait can.admin([{\n    pair_add: {\n        tokens: [symbolToId(\"ICP\"), symbolToId(\"MORA\")],\n        deleted: false,\n        config: {\n            icpswap: {\n                canister: \"hxf7i-dyaaa-aaaag-qcv7a-cai\"\n            }\n        }\n    }\n}]).then(log);\n"},{"kind":2,"language":"javascript","value":"// Add pair | Sonic\nawait can.admin([{\n    pair_add: {\n        tokens: [symbolToId(\"EXE\"), symbolToId(\"ICP\")],\n        deleted: false,\n        config: {\n            sonic: {\n                id: \"rh2pm-ryaaa-aaaan-qeniq-cai:ryjl3-tyaaa-aaaaa-aaaba-cai\"\n            }\n        }\n    }\n}]).then(log);\n"}]}