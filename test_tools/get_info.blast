{"cells":[{"kind":2,"language":"javascript","value":"let can = await ic(\"uxafr-vqaaa-aaaak-qcx6a-cai\");\n\nglobal({can})\n\nlet config = await can.get_config()\n\nlet idx =0;\nfor (let t of config.tokens) {\n    log(`${idx} ${t.symbol}`)\n    idx++;\n}\n\nidx = 0;\nfor (let p of config.pairs) {\n    let where = Object.keys(p.config)[0];\n\n    log(`${idx} ${where} ${config.tokens[p.tokens[0]].symbol} ${config.tokens[p.tokens[1]].symbol}`)\n\n    idx++;\n}"},{"kind":2,"language":"javascript","value":"\nlet canlog = await can.log_show()\n\nfor (let a of canlog) {\n    let t = new Date( Number(BigInt(a[0]) / 1000000n) );\n    log(`${t.toUTCString()} : ${a[1]} : ${a[3]} : ${JSON.stringify(a[2])}`);\n    \n}"},{"kind":2,"language":"javascript","value":"let data = await can.get_pairs({ t1h: null }, [1], (Date.now()/1000 - 60*60*24*95) * 1000000000, (Date.now()/1000) * 1000000000);\n\nlog(data);"}]}